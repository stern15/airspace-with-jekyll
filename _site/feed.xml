<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Great web agency</title>
    <description>Great web agency offers high impact yet affordable web development services. From web design to targeted SEO to custom web applications. </description>
    <link>http://127.0.0.1:4000/airspace-with-jekyll/airspace-with-jekyll/</link>
    <atom:link href="http://127.0.0.1:4000/airspace-with-jekyll/airspace-with-jekyll/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 17 May 2016 22:07:10 +0300</pubDate>
    <lastBuildDate>Tue, 17 May 2016 22:07:10 +0300</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>markdown</title>
        <description>&lt;p&gt;You may have heard of WYSIWYG (what you see is what you get) formatting. Think of Markdown like a simplified WYSIWYG … simplified in the best way.&lt;/p&gt;

&lt;p&gt;When web designers and developers approach a project, they build styles into the project. Those styles dictate how basic elements, like headers and links will appear.&lt;/p&gt;

&lt;p&gt;In the past, a WYSIWYG editing tools gave away too much design control. Someone could unknowingly add a new style to the design (like red italic bold headers) without meaning to. More often than not, it was a purposeful design addition, but that inevitably leads to a race to the bottom, so style treatment became larger, bolder, and brighter. This makes designers sad :( because their carefully crafted theme gets lost in the noise.&lt;/p&gt;

&lt;p&gt;Bottom line, people who edit content should focus on the words and the designer should make them pretty. Markdown does an excellent job at drawing that line in the sand, equipping us to all play nice together. When a designer pushes a new style to the website, the styles are consistently reflected across the whole site, so the design stays fresh and up to date with browser caveats and features. (Dropshadows anyone?)&lt;/p&gt;

&lt;p&gt;Markdown is widely accepted by developers and editors, so it’s the best choice for implementing best practice. Nearly every popular content management solution supports Markdown, if not out-of-the-box, then with an easy-to-install extension.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 01:33:00 +0300</pubDate>
        <link>http://127.0.0.1:4000/airspace-with-jekyll/airspace-with-jekyll/jekyll/what-is-markdown.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/airspace-with-jekyll/airspace-with-jekyll/jekyll/what-is-markdown.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>advance jekyll</title>
        <description>&lt;h1 id=&quot;liquid&quot;&gt;liquid&lt;/h1&gt;

&lt;p&gt;Your next stop should really be to read Liquid for Designers. Liquid is the glue that specifies all the rules needed to assemble your site, and is quite simple. Understand how Liquid works and you’ve mastered Jekyll. Jekyll provides some additional Liquid functions common for blogs.&lt;/p&gt;

&lt;p&gt;Your next stop is to get some really nice customizable CSS scaffolding to control the layout for your site. While there’s a huge number of free CSS themes available, this isn’t 2002, so head on over to Twitter-Bootstrap (a project originally created by some of the programmers at Twitter, now evolved to it’s own community). The CSS-based grid layout and some very nice JQuery Javascripts tools can make your site as pretty and as interactive as you can imagine. Like Octopress, prebuilt CSS can lead to all sites looking the same. Check out themes for Bootstrap, and the excellent set of icons by FontAwesome.&lt;/p&gt;

&lt;p&gt;Your final step is where the hacking really begins. Now and again you imagine something you just can’t do with these tools. Your only recourse is to ask on Stackoverflow for someone to do it for you learn a bit of Ruby. Anything you can write in Ruby you can add to Jekyll as a “plugin”, by defining a Liquid extension for a Ruby function. Ruby is clearly a favorite language of web-developers thanks to its dynamic-site implementation Ruby-on-Rails and a vibrant Github community, so there’s a wealth of useful tools, including an implementation to most APIs you might care to interact with (Github, Twitter, various Google APIs, are among the ones I’m using).&lt;/p&gt;
</description>
        <pubDate>Thu, 12 May 2016 01:33:00 +0300</pubDate>
        <link>http://127.0.0.1:4000/airspace-with-jekyll/airspace-with-jekyll/jekyll/advance-jekyll.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/airspace-with-jekyll/airspace-with-jekyll/jekyll/advance-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>benefits of static website</title>
        <description>&lt;p&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;
CMSs normally constrain your options, because they’re tied to a database with specific fields. If you want to add a Twitter widget to some pages, you’ll normally require a plugin, a shortcode or some custom functionality.&lt;/p&gt;

&lt;p&gt;In a static site, the widget can simply be inserted into a file directly or using a partial/snippet. There are few limits, because you’re unshackled by the those imposed by a CMS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Better Performance&lt;/strong&gt;
Most CMS applications offer built-in or plugin-powered cache systems to ensure pages are generated and reused when possible. This is effective, although the overhead of managing, validating and re-generating cached pages remains.&lt;/p&gt;

&lt;p&gt;Static sites are pre-cached pages which never expire. Files can also be minified prior to deployment to guarantee the smallest load. A static site will always perform better than a CMS-powered version using a similar template.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Fewer Server-side Dependencies&lt;/strong&gt;
A typical WordPress installation requires:&lt;/p&gt;

&lt;p&gt;a suitable operating system such as Ubuntu or CentOS
a web server such as Apache or NGINX
PHP with associated extensions and web server configurations
MySQL
the WordPress application
any necessary plugins
the theme/template code.
These dependencies must be installed and managed. WordPress requires less effort than some other applications, but it’s still possible for a single update to any part to cause chaos.&lt;/p&gt;

&lt;p&gt;A static site is lightweight, and can be hosted by any web server able to return HTML files. There is nothing else to install, manage or update.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Improved Reliability&lt;/strong&gt;
A CMS is complex, with many moving parts and points of failure. Run a WordPress site for any length of time and you’ll almost certainly encounter the dreaded “Failed to establish a database connection” error. Unforeseen CMS problems can arise from sudden traffic surges, which crash the database or restrict active connections.&lt;/p&gt;

&lt;p&gt;Serving a static site is less intensive — the server just has to return flat files. It’s still possible to crash a web server, but it’ll take considerably more concurrent requests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Superior Security&lt;/strong&gt;
There are several reasons why someone may want to attack your website. Traffic hijacking, rogue advertising, linking, authenticity spoofing and malware hosting all permit an unauthorized user to make monetary and/or kudos gains.&lt;/p&gt;

&lt;p&gt;A CMS opens a number of attack vectors. The most obvious is the login screen: it’s only as secure as the weakest user password. Be aware that any page running server-side code also offers potential exploits — for example, firing spam emails via your contact form. It may not be obvious that someone has gained access; the worst culprits want to stay hidden.&lt;/p&gt;

&lt;p&gt;A static site has little or no server-side functionality. You cannot access it via scripting or database security holes. Someone could still gain access via SSH or FTP, but they would struggle to do much damage other than defacing pages or uploading files. A quick git status or folder check can reveal break-ins. It’s then simple to change passwords, wipe the whole site and regenerate it again.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Client Control Considerations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You spend weeks building attractive CMS themes for the client to trash their site within minutes of your hand-over. Using a CMS is not necessarily easy, and it offers considerable power to content editors. You can lock down rights such as plugin installation, but it won’t prevent someone changing fonts, adding weird colors, using poor photography or corrupting the layout.&lt;/p&gt;

&lt;p&gt;A static site can use Markdown files. That limits the user’s options; they make fewer mistakes and cannot adversely affect the pages. Some will miss the CMS content administration panels, but you can either:&lt;/p&gt;

&lt;p&gt;use their existing CMS and cleanse data before generation, or
provide simpler workflows such as editing Dropbox files in StackEdit.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Version Control and Testing&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Database data is volatile. A CMS permits users to add, delete or change content on a whim. Wiping the whole site is a few clicks away. You can back up databases but, even if that’s done regularly, you’re still likely to lose some data.&lt;/p&gt;
</description>
        <pubDate>Sat, 23 Apr 2016 12:33:00 +0300</pubDate>
        <link>http://127.0.0.1:4000/airspace-with-jekyll/airspace-with-jekyll/jekyll/benefits-of-static-website.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/airspace-with-jekyll/airspace-with-jekyll/jekyll/benefits-of-static-website.html</guid>
        
        
        <category>jekyll</category>
        
      </item>
    
  </channel>
</rss>
